"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const axios_1 = __importDefault(require("axios"));
const Api_1 = require("../../enums/Api");
const AuthCredential_1 = require("../../models/auth/AuthCredential");
/**
 * The services that handles authentication.
 *
 * @internal
 */
class AuthService {
    /** The config object. */
    _config;
    /**
     * @param config - The config for Rettiwt.
     */
    constructor(config) {
        this._config = config;
    }
    /**
     * Decodes the encoded cookie string.
     *
     * @param encodedCookies - The encoded cookie string to decode.
     * @returns The decoded cookie string.
     */
    static decodeCookie(encodedCookies) {
        // Decoding the encoded cookie string
        const decodedCookies = Buffer.from(encodedCookies, 'base64').toString('ascii');
        return decodedCookies;
    }
    /**
     * Encodes the given cookie string.
     *
     * @param cookieString - The cookie string to encode.
     * @returns The encoded cookie string.
     */
    static encodeCookie(cookieString) {
        // Encoding the cookie string to base64
        const encodedCookies = Buffer.from(cookieString).toString('base64');
        return encodedCookies;
    }
    /**
     * Gets the user's id from the given API key.
     *
     * @param apiKey - The API key.
     * @returns The user id associated with the API key.
     */
    static getUserId(apiKey) {
        // Getting the cookie string from the API key
        const cookieString = AuthService.decodeCookie(apiKey);
        // Searching for the user id in the cookie string
        const searchResults = cookieString.match(/((?<=twid="u=)(\d+)(?="))|((?<=twid=u%3D)(\d+)(?=;))/);
        // If user id was found
        if (searchResults) {
            return searchResults[0];
        }
        // If user id was not found
        else {
            throw new Error(Api_1.ApiErrors.BAD_AUTHENTICATION);
        }
    }
    /**
     * Login to twitter as guest.
     *
     * @returns A new guest key.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance
     * const rettiwt = new Rettiwt();
     *
     * // Logging in an getting a new guest key
     * rettiwt.auth.guest()
     * .then(guestKey => {
     * 	// Use the guest key
     * 	...
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    async guest() {
        // Creating a new blank credential
        const cred = new AuthCredential_1.AuthCredential();
        // Getting the guest token
        await axios_1.default
            .post('https://api.twitter.com/1.1/guest/activate.json', undefined, {
            headers: cred.toHeader(),
            httpsAgent: this._config.httpsAgent,
        })
            .then((res) => {
            cred.guestToken = res.data.guest_token;
        });
        return cred;
    }
}
exports.AuthService = AuthService;
//# sourceMappingURL=AuthService.js.map