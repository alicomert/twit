import { AxiosRequestConfig } from 'axios';
import { RawAnalyticsGranularity, RawAnalyticsMetric } from '../enums/raw/Analytics';
/**
 * Collection of requests related to users.
 *
 * @public
 */
export declare class UserRequests {
    /**
     * @param id - The id of the user whose affiliates are to be fetched.
     * @param count - The number of affiliates to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of affiliates to fetch.
     */
    static affiliates(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param fromTime - The start time of the analytic data to be fetched.
     * @param toTime - The end time of the analytic data to be fetched.
     * @param granularity - The granularity of the analytic data to be fetched.
     * @param requestedMetrics - The metrics to be fetched.
     */
    static analytics(fromTime: Date, toTime: Date, granularity: RawAnalyticsGranularity, requestedMetrics: RawAnalyticsMetric[]): AxiosRequestConfig;
    /**
     * @param count - The number of bookmarks to fetch.
     * @param cursor - The cursor to the batch of bookmarks to fetch.
     */
    static bookmarks(count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param ids - The IDs of the users whose details are to be fetched.
     */
    static bulkDetailsByIds(ids: string[]): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose details are to be fetched.
     */
    static detailsById(id: string): AxiosRequestConfig;
    /**
     * @param userName - The username of the user whose details are to be fetched.
     */
    static detailsByUsername(userName: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user to follow.
     */
    static follow(id: string): AxiosRequestConfig;
    /**
     * @param count - The number of timeline items to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of followed timeline items to fetch.
     */
    static followed(count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose followers are to be fetched.
     * @param count - The number of followers to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of followers to fetch.
     */
    static followers(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose followings are to be fetched.
     * @param count - The number of followings to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of followings to fetch.
     */
    static following(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose highlights are to be fetched.
     * @param count - The number of highlights to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of highlights to fetch.
     */
    static highlights(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose likes are to be fetched.
     * @param count - The number of likes to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of likes to fetch.
     */
    static likes(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose media is to be fetched.
     * @param count - The number of media to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of media to fetch.
     */
    static media(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param count - The number of notifications to fetch.
     * @param cursor - The cursor to the batch of notifications to fetch.
     */
    static notifications(count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param count - The number of timeline items to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of recommended timeline items to fetch.
     */
    static recommended(count?: number, cursor?: string): AxiosRequestConfig;
    static scheduled(): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose subscriptions are to be fetched.
     * @param count - The number of subscriptions to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of subscriptions to fetch.
     */
    static subscriptions(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose timeline tweets are to be fetched.
     * @param count - The number of timeline tweets to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of timeline tweets to fetch.
     */
    static tweets(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user whose timeline tweets and replies are to be fetched.
     * @param count - The number of timeline tweets and replies to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of timeline tweets and replies to fetch.
     */
    static tweetsAndReplies(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the user to be unfollowed.
     */
    static unfollow(id: string): AxiosRequestConfig;
}
