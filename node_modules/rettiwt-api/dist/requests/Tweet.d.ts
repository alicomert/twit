import { AxiosRequestConfig } from 'axios';
import { RawTweetRepliesSortType } from '../enums/raw/Tweet';
import { ITweetFilter } from '../types/args/FetchArgs';
import { INewTweet } from '../types/args/PostArgs';
/**
 * Collection of requests related to tweets.
 *
 * @public
 */
export declare class TweetRequests {
    /**
     * @param ids - The IDs of the tweets whose details are to be fetched.
     */
    static bulkDetails(ids: string[]): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet whose details are to be fetched.
     */
    static details(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet to be liked.
     */
    static like(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet whose likers are to be fetched.
     * @param count - The number of likers to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of likers to fetch.
     */
    static likers(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param args - The configuration object for the tweet to be posted.
     */
    static post(args: INewTweet): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet whose replies are to be fetched.
     * @param cursor - The cursor to the batch of replies to fetch.
     */
    static replies(id: string, cursor?: string, sortBy?: RawTweetRepliesSortType): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet which is to be retweeted.
     */
    static retweet(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet whose retweeters are to be fetched.
     * @param count - The number of retweeters to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of retweeters to fetch.
     */
    static retweeters(id: string, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param args - The configuration object for the tweet to be posted.
     *
     * @remarks - Only `text` and `media.id` parameters are supported.
     */
    static schedule(args: INewTweet): AxiosRequestConfig;
    /**
     * @param filter - The filter to use for searching tweets.
     * @param count - The number of tweets to fetch. Only works as a lower limit when used with a cursor.
     * @param cursor - The cursor to the batch of tweets to fetch.
     */
    static search(filter: ITweetFilter, count?: number, cursor?: string): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet to be unliked.
     */
    static unlike(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the tweet to be unposted.
     */
    static unpost(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the source tweet (which was retweeted), to be unretweeted.
     */
    static unretweet(id: string): AxiosRequestConfig;
    /**
     * @param id - The id of the scheduled tweet to be unscheduled.
     */
    static unschedule(id: string): AxiosRequestConfig;
}
