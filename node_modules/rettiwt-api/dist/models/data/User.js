"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const Logging_1 = require("../../enums/Logging");
const JsonUtils_1 = require("../../helper/JsonUtils");
const LogService_1 = require("../../services/internal/LogService");
/**
 * The details of a single user.
 *
 * @public
 */
class User {
    /** The raw user details. */
    _raw;
    createdAt;
    description;
    followersCount;
    followingsCount;
    fullName;
    id;
    isVerified;
    likeCount;
    location;
    pinnedTweet;
    profileBanner;
    profileImage;
    statusesCount;
    userName;
    /**
     * @param user - The raw user details.
     */
    constructor(user) {
        this._raw = { ...user };
        this.id = user.rest_id;
        this.userName = user.legacy.screen_name;
        this.fullName = user.legacy.name;
        this.createdAt = new Date(user.legacy.created_at).toISOString();
        this.description = user.legacy.description.length ? user.legacy.description : undefined;
        this.isVerified = user.is_blue_verified;
        this.likeCount = user.legacy.favourites_count;
        this.followersCount = user.legacy.followers_count;
        this.followingsCount = user.legacy.friends_count;
        this.statusesCount = user.legacy.statuses_count;
        this.location = user.legacy.location.length ? user.legacy.location : undefined;
        this.pinnedTweet = user.legacy.pinned_tweet_ids_str[0];
        this.profileBanner = user.legacy.profile_banner_url;
        this.profileImage = user.legacy.profile_image_url_https;
    }
    /** The raw user details. */
    get raw() {
        return { ...this._raw };
    }
    /**
     * Extracts and deserializes multiple target users from the given raw response data.
     *
     * @param response - The raw response data.
     * @param ids - The ids of the target users.
     *
     * @returns The target deserialized users.
     */
    static multiple(response, ids) {
        let users = [];
        // Extracting the matching data
        const extract = (0, JsonUtils_1.findByFilter)(response, '__typename', 'User');
        // Deserializing valid data
        for (const item of extract) {
            if (item.legacy && item.legacy.created_at) {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.DESERIALIZE, { id: item.rest_id });
                users.push(new User(item));
            }
            else {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.WARNING, {
                    action: Logging_1.LogActions.DESERIALIZE,
                    message: `User not found, skipping`,
                });
            }
        }
        // Filtering only required user, if required
        if (ids && ids.length) {
            users = users.filter((user) => ids.includes(user.id));
        }
        return users;
    }
    /**
     * Extracts and deserializes a single target user from the given raw response data.
     *
     * @param response - The raw response data.
     *
     * @returns The target deserialized user.
     */
    static single(response) {
        const users = [];
        // Extracting the matching data
        const extract = (0, JsonUtils_1.findByFilter)(response, '__typename', 'User');
        // Deserializing valid data
        for (const item of extract) {
            if (item.legacy && item.legacy.created_at) {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.DESERIALIZE, { id: item.rest_id });
                users.push(new User(item));
            }
            else {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.WARNING, {
                    action: Logging_1.LogActions.DESERIALIZE,
                    message: `User not found, skipping`,
                });
            }
        }
        return users.length ? users[0] : undefined;
    }
    /**
     * Extracts and deserializes the timeline of users from the given raw response data.
     *
     * @param response - The raw response data.
     *
     * @returns The deserialized timeline of users.
     */
    static timeline(response) {
        const users = [];
        // Extracting the matching data
        const extract = (0, JsonUtils_1.findByFilter)(response, '__typename', 'TimelineUser');
        // Deserializing valid data
        for (const item of extract) {
            if (item.user_results?.result?.legacy) {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.DESERIALIZE, { id: item.user_results.result.rest_id });
                users.push(new User(item.user_results.result));
            }
            else {
                // Logging
                LogService_1.LogService.log(Logging_1.LogActions.WARNING, {
                    action: Logging_1.LogActions.DESERIALIZE,
                    message: `User not found, skipping`,
                });
            }
        }
        return users;
    }
    /**
     * @returns A serializable JSON representation of `this` object.
     */
    toJSON() {
        return {
            createdAt: this.createdAt,
            description: this.description,
            followersCount: this.followersCount,
            followingsCount: this.followingsCount,
            fullName: this.fullName,
            id: this.id,
            isVerified: this.isVerified,
            likeCount: this.likeCount,
            location: this.location,
            pinnedTweet: this.pinnedTweet,
            profileBanner: this.profileBanner,
            profileImage: this.profileImage,
            statusesCount: this.statusesCount,
            userName: this.userName,
        };
    }
}
exports.User = User;
//# sourceMappingURL=User.js.map