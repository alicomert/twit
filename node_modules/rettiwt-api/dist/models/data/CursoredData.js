"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CursoredData = void 0;
const Data_1 = require("../../enums/Data");
const JsonUtils_1 = require("../../helper/JsonUtils");
const Notification_1 = require("./Notification");
const Tweet_1 = require("./Tweet");
const User_1 = require("./User");
/**
 * The data that is fetched batch-wise using a cursor.
 *
 * @typeParam T - Type of data to be stored.
 *
 * @public
 */
class CursoredData {
    list;
    next;
    /**
     * @param response - The raw response.
     * @param type - The base type of the data included in the batch.
     */
    constructor(response, type) {
        // Initializing defaults
        this.list = [];
        this.next = '';
        if (type == Data_1.BaseType.TWEET) {
            this.list = Tweet_1.Tweet.timeline(response);
            this.next = (0, JsonUtils_1.findByFilter)(response, 'cursorType', 'Bottom')[0]?.value ?? '';
        }
        else if (type == Data_1.BaseType.USER) {
            this.list = User_1.User.timeline(response);
            this.next = (0, JsonUtils_1.findByFilter)(response, 'cursorType', 'Bottom')[0]?.value ?? '';
        }
        else if (type == Data_1.BaseType.NOTIFICATION) {
            this.list = Notification_1.Notification.list(response);
            this.next = (0, JsonUtils_1.findByFilter)(response, 'cursorType', 'Top')[0]?.value ?? '';
        }
    }
    /**
     * @returns A serializable JSON representation of `this` object.
     */
    toJSON() {
        return {
            list: this.list.map((item) => item.toJSON()),
            next: this.next,
        };
    }
}
exports.CursoredData = CursoredData;
//# sourceMappingURL=CursoredData.js.map