"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = void 0;
const Notification_1 = require("../../enums/Notification");
const Notification_2 = require("../../enums/raw/Notification");
const JsonUtils_1 = require("../../helper/JsonUtils");
/**
 * The details of a single notification.
 *
 * @public
 */
class Notification {
    /** The raw notification details. */
    _raw;
    from;
    id;
    message;
    receivedAt;
    target;
    type;
    /**
     * @param notification - The raw notification details.
     */
    constructor(notification) {
        this._raw = { ...notification };
        // Getting the original notification type
        const notificationType = (0, JsonUtils_1.findKeyByValue)(Notification_2.RawNotificationType, notification.icon.id);
        this.from = notification.template?.aggregateUserActionsV1?.fromUsers
            ? notification.template.aggregateUserActionsV1.fromUsers.map((item) => item.user.id)
            : [];
        this.id = notification.id;
        this.message = notification.message.text;
        this.receivedAt = new Date(Number(notification.timestampMs)).toISOString();
        this.target = notification.template?.aggregateUserActionsV1?.targetObjects
            ? notification.template.aggregateUserActionsV1.targetObjects.map((item) => item.tweet.id)
            : [];
        this.type = notificationType
            ? Notification_1.NotificationType[notificationType]
            : Notification_1.NotificationType.UNDEFINED;
    }
    /** The raw notification details. */
    get raw() {
        return { ...this._raw };
    }
    /**
     * Extracts and deserializes the list of notifications from the given raw response data.
     *
     * @param response - The raw response data.
     *
     * @returns The deserialized list of notifications.
     */
    static list(response) {
        const notifications = [];
        // Extracting notifications
        if (response.globalObjects.notifications) {
            // Iterating over the raw list of notifications
            for (const [, value] of Object.entries(response.globalObjects.notifications)) {
                notifications.push(new Notification(value));
            }
        }
        return notifications;
    }
    /**
     * @returns A serializable JSON representation of `this` object.
     */
    toJSON() {
        return {
            from: this.from,
            id: this.id,
            message: this.message,
            receivedAt: this.receivedAt,
            target: this.target,
            type: this.type,
        };
    }
}
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map