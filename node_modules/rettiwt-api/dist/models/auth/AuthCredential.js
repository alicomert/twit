"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthCredential = void 0;
const axios_1 = require("axios");
const Authentication_1 = require("../../enums/Authentication");
const AuthCookie_1 = require("./AuthCookie");
/**
 * The credentials for authenticating against Twitter.
 *
 * Depending on which tokens are present, the authentication type is determined as follows:
 * - authToken, guestToken =\> Guest authentication.
 * - authToken, csrfToken, cookie =\> User authentication.
 * - authToken, guestToken, cookie =\> Guest authentication while logging in.
 *
 * @internal
 */
class AuthCredential {
    authToken;
    authenticationType;
    cookies;
    csrfToken;
    guestToken;
    /**
     * @param cookies - The list of cookies to be used for authenticating against Twitter.
     * @param guestToken - The guest token to be used to authenticate a guest session.
     */
    constructor(cookies, guestToken) {
        this.authToken =
            'AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA';
        // If guest credentials given
        if (!cookies && guestToken) {
            this.guestToken = guestToken;
            this.authenticationType = Authentication_1.AuthenticationType.GUEST;
        }
        // If login credentials given
        else if (cookies && guestToken) {
            // Parsing the cookies
            const parsedCookie = new AuthCookie_1.AuthCookie(cookies);
            this.cookies = parsedCookie.toString();
            this.guestToken = guestToken;
            this.authenticationType = Authentication_1.AuthenticationType.LOGIN;
        }
        // If user credentials given
        else if (cookies && !guestToken) {
            // Parsing the cookies
            const parsedCookie = new AuthCookie_1.AuthCookie(cookies);
            this.cookies = parsedCookie.toString();
            this.csrfToken = parsedCookie.ct0;
            this.authenticationType = Authentication_1.AuthenticationType.USER;
        }
    }
    /**
     * @returns The HTTP header representation of 'this' object.
     */
    toHeader() {
        const headers = new axios_1.AxiosHeaders();
        /**
         * Conditionally initializing only those data which are supplied.
         *
         * This is done to ensure that the data that is not supplied, is not included in output, not even undefined.
         */
        if (this.authToken) {
            headers.set('authorization', `Bearer ${this.authToken}`);
        }
        if (this.guestToken) {
            headers.set('x-guest-token', this.guestToken);
        }
        if (this.csrfToken) {
            headers.set('x-csrf-token', this.csrfToken);
        }
        if (this.cookies) {
            headers.set('cookie', this.cookies);
        }
        return headers;
    }
}
exports.AuthCredential = AuthCredential;
//# sourceMappingURL=AuthCredential.js.map