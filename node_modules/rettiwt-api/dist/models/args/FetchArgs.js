"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetFilter = exports.FetchArgs = void 0;
/**
 * Options specifying the data that is to be fetched.
 *
 * @public
 */
class FetchArgs {
    count;
    cursor;
    filter;
    id;
    ids;
    sortBy;
    /**
     * @param args - Additional user-defined arguments for fetching the resource.
     */
    constructor(args) {
        this.id = args.id;
        this.ids = args.ids;
        this.count = args.count;
        this.cursor = args.cursor;
        this.filter = args.filter ? new TweetFilter(args.filter) : undefined;
        this.sortBy = args.sortBy;
    }
}
exports.FetchArgs = FetchArgs;
/**
 * The filter to be used for searching tweets.
 *
 * @public
 */
class TweetFilter {
    endDate;
    excludeWords;
    fromUsers;
    hashtags;
    includePhrase;
    includeWords;
    language;
    list;
    maxId;
    mentions;
    minLikes;
    minReplies;
    minRetweets;
    onlyLinks;
    onlyOriginal;
    onlyReplies;
    onlyText;
    optionalWords;
    quoted;
    sinceId;
    startDate;
    toUsers;
    top;
    /**
     * @param filter - The filter configuration.
     */
    constructor(filter) {
        this.endDate = filter.endDate;
        this.excludeWords = filter.excludeWords;
        this.fromUsers = filter.fromUsers;
        this.hashtags = filter.hashtags;
        this.includePhrase = filter.includePhrase;
        this.language = filter.language;
        this.list = filter.list;
        this.mentions = filter.mentions;
        this.quoted = filter.quoted;
        this.sinceId = filter.sinceId;
        this.maxId = filter.maxId;
        this.minLikes = filter.minLikes;
        this.minReplies = filter.minReplies;
        this.minRetweets = filter.minRetweets;
        this.onlyLinks = filter.onlyLinks;
        this.onlyOriginal = filter.onlyOriginal;
        this.onlyReplies = filter.onlyReplies;
        this.onlyText = filter.onlyText;
        this.optionalWords = filter.optionalWords;
        this.startDate = filter.startDate;
        this.toUsers = filter.toUsers;
        this.top = filter.top;
        this.includeWords = filter.includeWords;
    }
    /**
     * Convert Date object to Twitter string representation.
     * eg - 2023-06-23_11:21:06_UTC
     *
     * @param date - The date object to convert.
     * @returns The Twitter string representation of the date.
     */
    static _dateToTwitterString(date) {
        // Converting localized date to UTC date
        const utc = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()));
        /**
         * To convert ISO 8601 date string to Twitter date string:
         *
         * - 'T' between date and time substring is replace with '_'.
         * - Milliseconds substring is omitted.
         * - '_UTC' is appended as suffix.
         */
        return utc.toISOString().replace(/T/, '_').replace(/\..+/, '') + '_UTC';
    }
    /**
     * @returns The string representation of 'this' filter.
     */
    toString() {
        return ([
            this.includeWords ? this.includeWords.join(' ') : '',
            this.includePhrase ? `"${this.includePhrase}"` : '',
            this.optionalWords ? `(${this.optionalWords.join(' OR ')})` : '',
            this.excludeWords ? `${this.excludeWords.map((word) => '-' + word).join(' ')}` : '',
            this.hashtags ? `(${this.hashtags.map((hashtag) => '#' + hashtag).join(' OR ')})` : '',
            this.fromUsers ? `(${this.fromUsers.map((user) => `from:${user}`).join(' OR ')})` : '',
            this.toUsers ? `(${this.toUsers.map((user) => `to:${user}`).join(' OR ')})` : '',
            this.list ? `list:${this.list}` : '',
            this.mentions ? `(${this.mentions.map((mention) => '@' + mention).join(' OR ')})` : '',
            this.minReplies ? `min_replies:${this.minReplies}` : '',
            this.minLikes ? `min_faves:${this.minLikes}` : '',
            this.minRetweets ? `min_retweets:${this.minRetweets}` : '',
            this.language ? `lang:${this.language}` : '',
            this.startDate ? `since:${TweetFilter._dateToTwitterString(this.startDate)}` : '',
            this.endDate ? `until:${TweetFilter._dateToTwitterString(this.endDate)}` : '',
            this.sinceId ? `since_id:${this.sinceId}` : '',
            this.maxId ? `max_id:${this.maxId}` : '',
            this.quoted ? `quoted_tweet_id:${this.quoted}` : '',
        ]
            .filter((item) => item !== '()' && item !== '')
            .join(' ') +
            (this.onlyText === true ? ' -filter:links' : '') +
            (this.onlyOriginal === true ? ' -filter:replies' : '') +
            (this.onlyLinks === true ? ' filter:links' : '') +
            (this.onlyReplies === true ? ' filter:replies' : ''));
    }
}
exports.TweetFilter = TweetFilter;
//# sourceMappingURL=FetchArgs.js.map