import { Agent } from 'https';
import { IErrorHandler } from '../types/ErrorHandler';
import { IRettiwtConfig } from '../types/RettiwtConfig';
/**
 * The default headers.
 *
 * @public
 */
declare const DefaultHeaders: {
    Authority: string;
    'Accept-Language': string;
    'Cache-Control': string;
    Referer: string;
    'User-Agent': string;
    'X-Twitter-Active-User': string;
    'X-Twitter-Client-Language': string;
};
/**
 * The configuration for initializing a new Rettiwt instance.
 *
 * @public
 */
export declare class RettiwtConfig implements IRettiwtConfig {
    private _apiKey?;
    private _headers;
    private _httpsAgent;
    private _userId;
    readonly delay?: number | (() => number | Promise<number>);
    readonly errorHandler?: IErrorHandler;
    readonly logging?: boolean;
    readonly maxRetries: number;
    readonly timeout?: number;
    /**
     * @param config - The config for Rettiwt of type {@link IRettiwtConfig}.
     */
    constructor(config?: IRettiwtConfig);
    get apiKey(): string | undefined;
    get headers(): {
        [key: string]: string;
    };
    /** The HTTPS agent instance to use. */
    get httpsAgent(): Agent;
    /** The ID of the user associated with the API key, if any. */
    get userId(): string | undefined;
    set apiKey(apiKey: string | undefined);
    set headers(headers: {
        [key: string]: string;
    } | undefined);
    set proxyUrl(proxyUrl: URL | undefined);
}
export { DefaultHeaders as DefaultRettiwtHeaders };
