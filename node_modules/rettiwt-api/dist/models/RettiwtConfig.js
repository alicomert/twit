"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultRettiwtHeaders = exports.RettiwtConfig = void 0;
const https_1 = require("https");
const https_proxy_agent_1 = require("https-proxy-agent");
const AuthService_1 = require("../services/internal/AuthService");
/**
 * The default headers.
 *
 * @public
 */
const DefaultHeaders = {
    /* eslint-disable @typescript-eslint/naming-convention */
    Authority: 'x.com',
    'Accept-Language': 'en-US,en;q=0.9',
    'Cache-Control': 'no-cache',
    Referer: 'https://x.com',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',
    'X-Twitter-Active-User': 'yes',
    'X-Twitter-Client-Language': 'en',
    /* eslint-enable @typescript-eslint/naming-convention */
};
exports.DefaultRettiwtHeaders = DefaultHeaders;
/**
 * The configuration for initializing a new Rettiwt instance.
 *
 * @public
 */
class RettiwtConfig {
    // Parameters for internal use
    _apiKey;
    _headers;
    _httpsAgent;
    _userId;
    // Parameters that can be set once, upon initialization
    delay;
    errorHandler;
    logging;
    maxRetries;
    timeout;
    /**
     * @param config - The config for Rettiwt of type {@link IRettiwtConfig}.
     */
    constructor(config) {
        this._apiKey = config?.apiKey;
        this._httpsAgent = config?.proxyUrl ? new https_proxy_agent_1.HttpsProxyAgent(config?.proxyUrl) : new https_1.Agent();
        this._userId = config?.apiKey ? AuthService_1.AuthService.getUserId(config?.apiKey) : undefined;
        this.delay = config?.delay ?? 0;
        this.maxRetries = config?.maxRetries ?? 0;
        this.errorHandler = config?.errorHandler;
        this.logging = config?.logging;
        this.timeout = config?.timeout;
        this.apiKey = config?.apiKey;
        this._headers = {
            ...DefaultHeaders,
            ...config?.headers,
        };
    }
    get apiKey() {
        return this._apiKey;
    }
    get headers() {
        return this._headers;
    }
    /** The HTTPS agent instance to use. */
    get httpsAgent() {
        return this._httpsAgent;
    }
    /** The ID of the user associated with the API key, if any. */
    get userId() {
        return this._userId;
    }
    set apiKey(apiKey) {
        this._apiKey = apiKey;
        this._userId = apiKey ? AuthService_1.AuthService.getUserId(apiKey) : undefined;
    }
    set headers(headers) {
        this._headers = {
            ...DefaultHeaders,
            ...headers,
        };
    }
    set proxyUrl(proxyUrl) {
        this._httpsAgent = proxyUrl ? new https_proxy_agent_1.HttpsProxyAgent(proxyUrl) : new https_1.Agent();
    }
}
exports.RettiwtConfig = RettiwtConfig;
//# sourceMappingURL=RettiwtConfig.js.map