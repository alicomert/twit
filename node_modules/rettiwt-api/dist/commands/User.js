"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const CliUtils_1 = require("../helper/CliUtils");
/**
 * Creates a new 'user' command which uses the given Rettiwt instance.
 *
 * @param rettiwt - The Rettiwt instance to use.
 * @returns The created 'user' command.
 */
function createUserCommand(rettiwt) {
    // Creating the 'user' command
    const user = (0, commander_1.createCommand)('user').description('Access resources releated to users');
    // Affiliates
    user.command('affiliates')
        .description('Fetch the list of users who affiliated to the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of affiliates to fetch')
        .argument('[cursor]', 'The cursor to the batch of affiliates to fetch')
        .action(async (id, count, cursor) => {
        try {
            const users = await rettiwt.user.affiliates(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(users);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    user.command('bookmarks')
        .description('Fetch your list of bookmarks')
        .argument('[count]', 'The number of bookmarks to fetch')
        .argument('[cursor]', 'The cursor to the batch of bookmarks to fetch')
        .action(async (count, cursor) => {
        try {
            const bookmarks = await rettiwt.user.bookmarks(count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(bookmarks);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Details
    user.command('details')
        .description('Fetch the details of the user with the given id/username')
        .argument('<id>', 'The username/id of the user whose details are to be fetched')
        .action(async (id) => {
        try {
            // Getting the different IDs
            const ids = id.split(',');
            // If single ID given
            if (ids.length <= 1) {
                const details = await rettiwt.user.details(ids[0]);
                (0, CliUtils_1.output)(details);
            }
            // If multiple IDs given
            else {
                const details = await rettiwt.user.details(ids);
                (0, CliUtils_1.output)(details);
            }
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Follow
    user.command('follow')
        .description('Follow a user')
        .argument('<id>', 'The user to follow')
        .action(async (id) => {
        try {
            const result = await rettiwt.user.follow(id);
            (0, CliUtils_1.output)(result);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Followed
    user.command('followed')
        .description('Fetch your followed feed')
        .argument('[cursor]', 'The cursor to the batch of feed items to fetch')
        .action(async (cursor) => {
        try {
            const tweets = await rettiwt.user.followed(cursor);
            (0, CliUtils_1.output)(tweets);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Followers
    user.command('followers')
        .description('Fetch the list of users who follow the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of followers to fetch')
        .argument('[cursor]', 'The cursor to the batch of followers to fetch')
        .action(async (id, count, cursor) => {
        try {
            const users = await rettiwt.user.followers(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(users);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Following
    user.command('following')
        .description('Fetch the list of users who are followed by the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of following to fetch')
        .argument('[cursor]', 'The cursor to the batch of following to fetch')
        .action(async (id, count, cursor) => {
        try {
            const users = await rettiwt.user.following(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(users);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Highlights
    user.command('highlights')
        .description('Fetch the list of highlighted tweets of the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of highlighted tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of highlights to fetch')
        .action(async (id, count, cursor) => {
        try {
            const tweets = await rettiwt.user.highlights(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(tweets);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Likes
    user.command('likes')
        .description('Fetch your list of liked tweet')
        .argument('[count]', 'The number of liked tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of liked tweets to fetch')
        .action(async (count, cursor) => {
        try {
            const tweets = await rettiwt.user.likes(count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(tweets);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Media
    user.command('media')
        .description('Fetch the media timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of media to fetch')
        .argument('[cursor]', 'The cursor to the batch of media to fetch')
        .action(async (id, count, cursor) => {
        try {
            const media = await rettiwt.user.media(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(media);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Recommended
    user.command('recommended')
        .description('Fetch your recommended feed')
        .argument('[cursor]', 'The cursor to the batch of feed items to fetch')
        .action(async (cursor) => {
        try {
            const tweets = await rettiwt.user.recommended(cursor);
            (0, CliUtils_1.output)(tweets);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Replies
    user.command('replies')
        .description('Fetch the replies timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of replies to fetch')
        .argument('[cursor]', 'The cursor to the batch of replies to fetch')
        .action(async (id, count, cursor) => {
        try {
            const replies = await rettiwt.user.replies(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(replies);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Timeline
    user.command('timeline')
        .description('Fetch the tweets timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of tweets to fetch')
        .action(async (id, count, cursor) => {
        try {
            const tweets = await rettiwt.user.timeline(id, count ? parseInt(count) : undefined, cursor);
            (0, CliUtils_1.output)(tweets);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    // Unfollow
    user.command('unfollow')
        .description('Unfollow a user')
        .argument('<id>', 'The user to unfollow')
        .action(async (id) => {
        try {
            const result = await rettiwt.user.unfollow(id);
            (0, CliUtils_1.output)(result);
        }
        catch (error) {
            (0, CliUtils_1.output)(error);
        }
    });
    return user;
}
exports.default = createUserCommand;
//# sourceMappingURL=User.js.map